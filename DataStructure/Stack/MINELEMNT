

class GetMin
{
    
    /* inserts elements of the array into 
        stack and return the stackn*/
    public static Stack<Integer> _push(int arr[],int n)
    {
        Stack<Integer> s1=new Stack<Integer>();
        for(int i=0;i<n;i++)
        {
            s1.push(arr[i]);
        }
        return s1;
    }
    
    /* print minimum element of the stack each time
       after popping*/
    static void _getMinAtPop(Stack<Integer>s)
    {
        ArrayList<Integer>v = new ArrayList<>();
    
        while(!s.isEmpty())
        {
            v.add(s.peek());
            s.pop();
        }
        
        Stack<Integer>minStack = new Stack<>();
        s.push(v.get(v.size()-1));
        
        // push the last element of vector into the minStack
        minStack.push(v.get(v.size()-1));
        
        // now iterate from the second last element in the vector
        for(int i=v.size()-2;i>=0;i--)
        {
            s.push(v.get(i));
            
            // compare if current element can be the min
            if(s.peek()<minStack.peek())
            minStack.push(s.peek());
            else
            minStack.push(minStack.peek());
        }
    
        // print the min element at each pop from the stack
        while(!s.isEmpty())
        {
            System.out.print(minStack.peek() + " ");
            s.pop();
            minStack.pop();
        }
    }
}

